{"remainingRequest":"/Users/maeva/Dropbox/Insight/project/hypofree-app/vue-app/node_modules/babel-loader/lib/index.js!/Users/maeva/Dropbox/Insight/project/hypofree-app/vue-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/maeva/Dropbox/Insight/project/hypofree-app/vue-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/maeva/Dropbox/Insight/project/hypofree-app/vue-app/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/maeva/Dropbox/Insight/project/hypofree-app/vue-app/src/App.vue","mtime":1580742254240},{"path":"/Users/maeva/Dropbox/Insight/project/hypofree-app/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maeva/Dropbox/Insight/project/hypofree-app/vue-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/maeva/Dropbox/Insight/project/hypofree-app/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maeva/Dropbox/Insight/project/hypofree-app/vue-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9tYWV2YS9Ecm9wYm94L0luc2lnaHQvcHJvamVjdC9oeXBvZnJlZS1hcHAvdnVlLWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBHbHVjb3NlVmlzIGZyb20gJ0AvY29tcG9uZW50cy9HbHVjb3NlVmlzLnZ1ZSc7CmltcG9ydCBHbHVjb3NlRm9ybSBmcm9tICdAL2NvbXBvbmVudHMvR2x1Y29zZUZvcm0udnVlJzsKaW1wb3J0IFVzZXJGb3JtIGZyb20gJ0AvY29tcG9uZW50cy9Vc2VyRm9ybS52dWUnOyAvLyBDaGFuZ2UgYmFzZV91cmwgd2hlbiBkZXBsb3llZCAtIEZsYXNrIHNlcnZlciBiYXNlX3VybAoKdmFyIGJhc2VfdXJsID0gJ2h0dHA6Ly8xMjcuMC4wLjE6NTAwMC8nOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ2FwcCcsCiAgY29tcG9uZW50czogewogICAgR2x1Y29zZVZpczogR2x1Y29zZVZpcywKICAgIEdsdWNvc2VGb3JtOiBHbHVjb3NlRm9ybSwKICAgIFVzZXJGb3JtOiBVc2VyRm9ybQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIG5ld0JHOiAiIiwKICAgICAgYWxhcm06IDAsCiAgICAgIHVzZXJJbmZvOiB7fSwKICAgICAgZGF0YTogW10KICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBzZXRVc2VySW5mbzogZnVuY3Rpb24gc2V0VXNlckluZm8odXNlckluZm8pIHsKICAgICAgdGhpcy51c2VySW5mbyA9IHVzZXJJbmZvOwogICAgICB0aGlzLnVzZXJJbmZvLmhlaWdodCA9IHRoaXMudXNlckluZm8uZmVldCAqIDAuMzA0OCArIHRoaXMudXNlckluZm8uaW5jaCAqIDAuMDI1NDsKICAgICAgdGhpcy51c2VySW5mby5ibWkgPSB0aGlzLnVzZXJJbmZvLndlaWdodCAqIDAuNDUzIC8gKHRoaXMudXNlckluZm8uaGVpZ2h0ICogdGhpcy51c2VySW5mby5oZWlnaHQpOwogICAgfSwKICAgIC8vIFBPU1QgbmV3IEJHIG1lYXN1cmVtZW50IC0gcmV0dXJucyBmdWxsIGxpdmUgZ2x1Y29zZSBkYXRhICsgbW9kZWwgb3V0cHV0IC0gVE9ETwogICAgYWRkTmV3Qkc6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9hZGROZXdCRyA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUobmV3QkcpIHsKICAgICAgICB2YXIgcmVzcG9uc2UsIGRhdGE7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDA7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaChiYXNlX3VybCArICdhcGkvdXBkYXRlLWdsdWNvc2UvJywgewogICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgICAgICduZXdCRyc6IG5ld0JHLAogICAgICAgICAgICAgICAgICAgICdkYXRhJzogdGhpcy5kYXRhLAogICAgICAgICAgICAgICAgICAgICdhbGFybSc6IHRoaXMuYWxhcm0sCiAgICAgICAgICAgICAgICAgICAgJ3VzZXJJbmZvJzogdGhpcy51c2VySW5mbwogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAgICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOCcKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgZGF0YSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICAvLyBzZXJ2ZXIgc2hvdWxkIHJldHVybiB0aGUgcGhvbmUgbnVtYmVyCiAgICAgICAgICAgICAgICB0aGlzLm5ld0JHID0gZGF0YS5uZXdCRzsKICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IGRhdGEuZGF0YTsKICAgICAgICAgICAgICAgIHRoaXMuYWxhcm0gPSBkYXRhLmFsYXJtOwogICAgICAgICAgICAgICAgdGhpcy51c2VySW5mbyA9IHRoaXMudXNlckluZm87CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMzsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMCk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKF9jb250ZXh0LnQwKTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMsIFtbMCwgMTNdXSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGFkZE5ld0JHKF94KSB7CiAgICAgICAgcmV0dXJuIF9hZGROZXdCRy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gYWRkTmV3Qkc7CiAgICB9KCksCiAgICAvLyBHZXQgbGl2ZSBwYXN0RGF0YSBmcm9tIHVzZXIgc2Vzc2lvbgogICAgZ2V0R2x1Y29zZURhdGE6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9nZXRHbHVjb3NlRGF0YSA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciByZXNwb25zZSwgZGF0YTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAwOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKGJhc2VfdXJsICsgJ2FwaS9nbHVjb3NlLWRhdGEvJyk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBkYXRhID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhLmRhdGE7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDEwOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gX2NvbnRleHQyWyJjYXRjaCJdKDApOwogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihfY29udGV4dDIudDApOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzLCBbWzAsIDEwXV0pOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBnZXRHbHVjb3NlRGF0YSgpIHsKICAgICAgICByZXR1cm4gX2dldEdsdWNvc2VEYXRhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBnZXRHbHVjb3NlRGF0YTsKICAgIH0oKQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIC8vIFRPRE86IGluaXRpYWxpemUgdXNlciBzZXNzaW9uIG9uIHNlcnZlcgogICAgdGhpcy5nZXRHbHVjb3NlRGF0YSgpOwogIH0KfTs="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAmBA,OAAA,UAAA,MAAA,6BAAA;AACA,OAAA,WAAA,MAAA,8BAAA;AACA,OAAA,QAAA,MAAA,2BAAA,C,CAEA;;AACA,IAAA,QAAA,GAAA,wBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,KADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,UAAA,EAAA,UADA;AAEA,IAAA,WAAA,EAAA,WAFA;AAGA,IAAA,QAAA,EAAA;AAHA,GAFA;AAQA,EAAA,IARA,kBAQA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,EADA;AAEA,MAAA,KAAA,EAAA,CAFA;AAGA,MAAA,QAAA,EAAA,EAHA;AAIA,MAAA,IAAA,EAAA;AAJA,KAAA;AAMA,GAfA;AAiBA,EAAA,OAAA,EAAA;AAGA,IAAA,WAHA,uBAGA,QAHA,EAGA;AACA,WAAA,QAAA,GAAA,QAAA;AACA,WAAA,QAAA,CAAA,MAAA,GAAA,KAAA,QAAA,CAAA,IAAA,GAAA,MAAA,GAAA,KAAA,QAAA,CAAA,IAAA,GAAA,MAAA;AACA,WAAA,QAAA,CAAA,GAAA,GAAA,KAAA,QAAA,CAAA,MAAA,GAAA,KAAA,IAAA,KAAA,QAAA,CAAA,MAAA,GAAA,KAAA,QAAA,CAAA,MAAA,CAAA;AACA,KAPA;AASA;AACA,IAAA,QAVA;AAAA;AAAA;AAAA,+CAUA,KAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAYA,KAAA,CAAA,QAAA,GAAA,qBAAA,EAAA;AACA,kBAAA,MAAA,EAAA,MADA;AAEA,kBAAA,IAAA,EAAA,IAAA,CAAA,SAAA,CAAA;AAAA,6BAAA,KAAA;AACA,4BAAA,KAAA,IADA;AAEA,6BAAA,KAAA,KAFA;AAGA,gCAAA,KAAA;AAHA,mBAAA,CAFA;AAMA,kBAAA,OAAA,EAAA;AAAA,oCAAA;AAAA;AANA,iBAAA,CAZA;;AAAA;AAYA,gBAAA,QAZA;AAAA;AAAA,uBAoBA,QAAA,CAAA,IAAA,EApBA;;AAAA;AAoBA,gBAAA,IApBA;AAoBA;AACA,qBAAA,KAAA,GAAA,IAAA,CAAA,KAAA;AACA,qBAAA,IAAA,GAAA,IAAA,CAAA,IAAA;AACA,qBAAA,KAAA,GAAA,IAAA,CAAA,KAAA;AACA,qBAAA,QAAA,GAAA,KAAA,QAAA;AAxBA;AAAA;;AAAA;AAAA;AAAA;AA0BA,gBAAA,OAAA,CAAA,KAAA;;AA1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA8BA;AACA,IAAA,cA/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAiCA,KAAA,CAAA,QAAA,GAAA,mBAAA,CAjCA;;AAAA;AAiCA,gBAAA,QAjCA;AAAA;AAAA,uBAkCA,QAAA,CAAA,IAAA,EAlCA;;AAAA;AAkCA,gBAAA,IAlCA;AAmCA,qBAAA,IAAA,GAAA,IAAA,CAAA,IAAA;AAnCA;AAAA;;AAAA;AAAA;AAAA;AAqCA,gBAAA,OAAA,CAAA,KAAA;;AArCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,GAjBA;AA6DA,EAAA,OA7DA,qBA6DA;AACA;AACA,SAAA,cAAA;AACA;AAhEA,CAAA","sourcesContent":["<template>\n  <div id=\"app\">\n    <div id='banner'>\n      <h1>SweetTweet</h1>\n      <p>Helping you prevent hypoglycemia</p>\n    </div>\n    <user-form @add:userInfo=\"setUserInfo\" />\n    <glucose-form @add:newBG=\"addNewBG\" />\n    <glucose-vis :data=\"data\"/>\n\n    <footer>\n      <span>&copy; Maeva Fincker - 2020</span>\n      <br>\n      Developped with Flask and Vue.js\n    </footer>\n  </div>\n</template>\n\n<script>\nimport GlucoseVis from '@/components/GlucoseVis.vue'\nimport GlucoseForm from '@/components/GlucoseForm.vue'\nimport UserForm from '@/components/UserForm.vue'\n\n// Change base_url when deployed - Flask server base_url\nconst base_url = 'http://127.0.0.1:5000/'\n\nexport default {\n  name: 'app',\n  components: {\n    GlucoseVis,\n    GlucoseForm,\n    UserForm\n  },\n\n  data() {\n    return {\n      newBG: \"\",\n      alarm: 0,\n      userInfo: {},\n      data: [],\n    }\n  },\n\n  methods: {\n\n\n    setUserInfo(userInfo) {\n      this.userInfo = userInfo\n      this.userInfo.height = this.userInfo.feet * 0.3048 + this.userInfo.inch * 0.0254\n      this.userInfo.bmi = this.userInfo.weight * 0.453 / (this.userInfo.height * this.userInfo.height)\n    },\n\n    // POST new BG measurement - returns full live glucose data + model output - TODO\n    async addNewBG(newBG) {\n      try {\n        const response = await fetch(base_url + 'api/update-glucose/', {\n          method: 'POST',\n          body: JSON.stringify({'newBG' : newBG,\n                                'data': this.data,\n                                'alarm' : this.alarm,\n                                'userInfo' : this.userInfo}),\n          headers: {'Content-type' : 'application/json; charset=UTF-8', }\n        })\n        const data = await response.json() // server should return the phone number\n        this.newBG = data.newBG\n        this.data = data.data\n        this.alarm = data.alarm\n        this.userInfo = this.userInfo\n      } catch(error) {\n        console.error(error)\n      }\n    },\n\n    // Get live pastData from user session\n    async getGlucoseData() {\n      try {\n        const response = await fetch(base_url + 'api/glucose-data/')\n        const data = await response.json()\n        this.data = data.data\n      } catch(error) {\n        console.error(error)\n      }\n    },\n\n\n  },\n\n  mounted() {\n    // TODO: initialize user session on server\n    this.getGlucoseData()\n  },\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  \n}\nfooter {\n  color: #f2f2f2;\n  background-color: #6e5773;\n  padding: 20px 0px 10px 0px;\n  font-size: 8pt;\n}\nfooter > span {\n  font-size: 10pt;\n}\n#banner {\n  color: white;\n  background-color: #6e5773;\n  padding: 10px 0px;\n}\n\n#banner > h1 {\n  color: white;\n  font-size: 50pt;\n  margin-bottom: 0px;\n}\n#banner > p {\n  font-size: 15pt;\n}\nbutton {\n  background-color: #d45d79;\n  border: 1px solid #d45d79;\n}\n\nbutton:hover {\n  background-color: #6e5773;\n  border: 1px solid #6e5773;;\n}\n</style>\n"],"sourceRoot":"src"}]}
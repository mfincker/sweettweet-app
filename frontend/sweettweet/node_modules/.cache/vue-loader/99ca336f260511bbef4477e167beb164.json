{"remainingRequest":"/Users/maeva/Dropbox/Insight/project/hypofree-app/frontend/sweettweet/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/maeva/Dropbox/Insight/project/hypofree-app/frontend/sweettweet/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/maeva/Dropbox/Insight/project/hypofree-app/frontend/sweettweet/src/App.vue","mtime":1580742254240},{"path":"/Users/maeva/Dropbox/Insight/project/hypofree-app/frontend/sweettweet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maeva/Dropbox/Insight/project/hypofree-app/frontend/sweettweet/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/maeva/Dropbox/Insight/project/hypofree-app/frontend/sweettweet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maeva/Dropbox/Insight/project/hypofree-app/frontend/sweettweet/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBHbHVjb3NlVmlzIGZyb20gJ0AvY29tcG9uZW50cy9HbHVjb3NlVmlzLnZ1ZScKaW1wb3J0IEdsdWNvc2VGb3JtIGZyb20gJ0AvY29tcG9uZW50cy9HbHVjb3NlRm9ybS52dWUnCmltcG9ydCBVc2VyRm9ybSBmcm9tICdAL2NvbXBvbmVudHMvVXNlckZvcm0udnVlJwoKLy8gQ2hhbmdlIGJhc2VfdXJsIHdoZW4gZGVwbG95ZWQgLSBGbGFzayBzZXJ2ZXIgYmFzZV91cmwKY29uc3QgYmFzZV91cmwgPSAnaHR0cDovLzEyNy4wLjAuMTo1MDAwLycKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnYXBwJywKICBjb21wb25lbnRzOiB7CiAgICBHbHVjb3NlVmlzLAogICAgR2x1Y29zZUZvcm0sCiAgICBVc2VyRm9ybQogIH0sCgogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBuZXdCRzogIiIsCiAgICAgIGFsYXJtOiAwLAogICAgICB1c2VySW5mbzoge30sCiAgICAgIGRhdGE6IFtdLAogICAgfQogIH0sCgogIG1ldGhvZHM6IHsKCgogICAgc2V0VXNlckluZm8odXNlckluZm8pIHsKICAgICAgdGhpcy51c2VySW5mbyA9IHVzZXJJbmZvCiAgICAgIHRoaXMudXNlckluZm8uaGVpZ2h0ID0gdGhpcy51c2VySW5mby5mZWV0ICogMC4zMDQ4ICsgdGhpcy51c2VySW5mby5pbmNoICogMC4wMjU0CiAgICAgIHRoaXMudXNlckluZm8uYm1pID0gdGhpcy51c2VySW5mby53ZWlnaHQgKiAwLjQ1MyAvICh0aGlzLnVzZXJJbmZvLmhlaWdodCAqIHRoaXMudXNlckluZm8uaGVpZ2h0KQogICAgfSwKCiAgICAvLyBQT1NUIG5ldyBCRyBtZWFzdXJlbWVudCAtIHJldHVybnMgZnVsbCBsaXZlIGdsdWNvc2UgZGF0YSArIG1vZGVsIG91dHB1dCAtIFRPRE8KICAgIGFzeW5jIGFkZE5ld0JHKG5ld0JHKSB7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChiYXNlX3VybCArICdhcGkvdXBkYXRlLWdsdWNvc2UvJywgewogICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7J25ld0JHJyA6IG5ld0JHLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhJzogdGhpcy5kYXRhLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhbGFybScgOiB0aGlzLmFsYXJtLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1c2VySW5mbycgOiB0aGlzLnVzZXJJbmZvfSksCiAgICAgICAgICBoZWFkZXJzOiB7J0NvbnRlbnQtdHlwZScgOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOCcsIH0KICAgICAgICB9KQogICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCkgLy8gc2VydmVyIHNob3VsZCByZXR1cm4gdGhlIHBob25lIG51bWJlcgogICAgICAgIHRoaXMubmV3QkcgPSBkYXRhLm5ld0JHCiAgICAgICAgdGhpcy5kYXRhID0gZGF0YS5kYXRhCiAgICAgICAgdGhpcy5hbGFybSA9IGRhdGEuYWxhcm0KICAgICAgICB0aGlzLnVzZXJJbmZvID0gdGhpcy51c2VySW5mbwogICAgICB9IGNhdGNoKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcikKICAgICAgfQogICAgfSwKCiAgICAvLyBHZXQgbGl2ZSBwYXN0RGF0YSBmcm9tIHVzZXIgc2Vzc2lvbgogICAgYXN5bmMgZ2V0R2x1Y29zZURhdGEoKSB7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChiYXNlX3VybCArICdhcGkvZ2x1Y29zZS1kYXRhLycpCiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKQogICAgICAgIHRoaXMuZGF0YSA9IGRhdGEuZGF0YQogICAgICB9IGNhdGNoKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcikKICAgICAgfQogICAgfSwKCgogIH0sCgogIG1vdW50ZWQoKSB7CiAgICAvLyBUT0RPOiBpbml0aWFsaXplIHVzZXIgc2Vzc2lvbiBvbiBzZXJ2ZXIKICAgIHRoaXMuZ2V0R2x1Y29zZURhdGEoKQogIH0sCn0K"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <div id='banner'>\n      <h1>SweetTweet</h1>\n      <p>Helping you prevent hypoglycemia</p>\n    </div>\n    <user-form @add:userInfo=\"setUserInfo\" />\n    <glucose-form @add:newBG=\"addNewBG\" />\n    <glucose-vis :data=\"data\"/>\n\n    <footer>\n      <span>&copy; Maeva Fincker - 2020</span>\n      <br>\n      Developped with Flask and Vue.js\n    </footer>\n  </div>\n</template>\n\n<script>\nimport GlucoseVis from '@/components/GlucoseVis.vue'\nimport GlucoseForm from '@/components/GlucoseForm.vue'\nimport UserForm from '@/components/UserForm.vue'\n\n// Change base_url when deployed - Flask server base_url\nconst base_url = 'http://127.0.0.1:5000/'\n\nexport default {\n  name: 'app',\n  components: {\n    GlucoseVis,\n    GlucoseForm,\n    UserForm\n  },\n\n  data() {\n    return {\n      newBG: \"\",\n      alarm: 0,\n      userInfo: {},\n      data: [],\n    }\n  },\n\n  methods: {\n\n\n    setUserInfo(userInfo) {\n      this.userInfo = userInfo\n      this.userInfo.height = this.userInfo.feet * 0.3048 + this.userInfo.inch * 0.0254\n      this.userInfo.bmi = this.userInfo.weight * 0.453 / (this.userInfo.height * this.userInfo.height)\n    },\n\n    // POST new BG measurement - returns full live glucose data + model output - TODO\n    async addNewBG(newBG) {\n      try {\n        const response = await fetch(base_url + 'api/update-glucose/', {\n          method: 'POST',\n          body: JSON.stringify({'newBG' : newBG,\n                                'data': this.data,\n                                'alarm' : this.alarm,\n                                'userInfo' : this.userInfo}),\n          headers: {'Content-type' : 'application/json; charset=UTF-8', }\n        })\n        const data = await response.json() // server should return the phone number\n        this.newBG = data.newBG\n        this.data = data.data\n        this.alarm = data.alarm\n        this.userInfo = this.userInfo\n      } catch(error) {\n        console.error(error)\n      }\n    },\n\n    // Get live pastData from user session\n    async getGlucoseData() {\n      try {\n        const response = await fetch(base_url + 'api/glucose-data/')\n        const data = await response.json()\n        this.data = data.data\n      } catch(error) {\n        console.error(error)\n      }\n    },\n\n\n  },\n\n  mounted() {\n    // TODO: initialize user session on server\n    this.getGlucoseData()\n  },\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  \n}\nfooter {\n  color: #f2f2f2;\n  background-color: #6e5773;\n  padding: 20px 0px 10px 0px;\n  font-size: 8pt;\n}\nfooter > span {\n  font-size: 10pt;\n}\n#banner {\n  color: white;\n  background-color: #6e5773;\n  padding: 10px 0px;\n}\n\n#banner > h1 {\n  color: white;\n  font-size: 50pt;\n  margin-bottom: 0px;\n}\n#banner > p {\n  font-size: 15pt;\n}\nbutton {\n  background-color: #d45d79;\n  border: 1px solid #d45d79;\n}\n\nbutton:hover {\n  background-color: #6e5773;\n  border: 1px solid #6e5773;;\n}\n</style>\n"]}]}
{"remainingRequest":"/Users/maeva/Dropbox/Insight/project/hypofree-app/vue-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/maeva/Dropbox/Insight/project/hypofree-app/vue-app/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/maeva/Dropbox/Insight/project/hypofree-app/vue-app/src/App.vue","mtime":1580435521175},{"path":"/Users/maeva/Dropbox/Insight/project/hypofree-app/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maeva/Dropbox/Insight/project/hypofree-app/vue-app/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maeva/Dropbox/Insight/project/hypofree-app/vue-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/maeva/Dropbox/Insight/project/hypofree-app/vue-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maeva/Dropbox/Insight/project/hypofree-app/vue-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBHbHVjb3NlVmlzIGZyb20gJ0AvY29tcG9uZW50cy9HbHVjb3NlVmlzLnZ1ZScKaW1wb3J0IEdsdWNvc2VGb3JtIGZyb20gJ0AvY29tcG9uZW50cy9HbHVjb3NlRm9ybS52dWUnCmltcG9ydCBQaG9uZUZvcm0gZnJvbSAnQC9jb21wb25lbnRzL1Bob25lRm9ybS52dWUnCmltcG9ydCBVc2VyRm9ybSBmcm9tICdAL2NvbXBvbmVudHMvVXNlckZvcm0udnVlJwoKLy8gQ2hhbmdlIGJhc2VfdXJsIHdoZW4gZGVwbG95ZWQgLSBGbGFzayBzZXJ2ZXIgYmFzZV91cmwKY29uc3QgYmFzZV91cmwgPSAnaHR0cDovLzEyNy4wLjAuMTo1MDAwLycKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnYXBwJywKICBjb21wb25lbnRzOiB7CiAgICBQaG9uZUZvcm0sCiAgICBHbHVjb3NlVmlzLAogICAgR2x1Y29zZUZvcm0sCiAgICBVc2VyRm9ybQogIH0sCgogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBwaG9uZU51bWJlcjogIiIsCiAgICAgIHBhc3REYXRhOiBbXSwKICAgICAgZm9yZWNhc3REYXRhOiBbXSwKICAgICAgbmV3Qkc6ICIiLAogICAgICBhbGFybTogMCwKICAgICAgdXNlckluZm86IHt9LAogICAgfQogIH0sCgogIG1ldGhvZHM6IHsKCiAgICAvLyBVcGRhdGUgcGhvbmVOdW1iZXIgc3RhdGUKICAgIGFkZFBob25lTnVtYmVyKG5ld1Bob25lTnVtYmVyKSB7CiAgICAgIHRoaXMucGhvbmVOdW1iZXIgPSBuZXdQaG9uZU51bWJlcgogICAgfSwKCiAgICBzZXRVc2VySW5mbyh1c2VySW5mbykgewogICAgICB0aGlzLnVzZXJJbmZvID0gdXNlckluZm8KICAgIH0sCgogICAgLy8gUE9TVCBuZXcgQkcgbWVhc3VyZW1lbnQgLSByZXR1cm5zIGZ1bGwgbGl2ZSBnbHVjb3NlIGRhdGEgKyBtb2RlbCBvdXRwdXQgLSBUT0RPCiAgICBhc3luYyBhZGROZXdCRyhuZXdCRykgewogICAgICB0cnkgewogICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYmFzZV91cmwgKyAnYXBpL3VwZGF0ZS1nbHVjb3NlJywgewogICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7J25ld0JHJyA6IG5ld0JHLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwYXN0RGF0YSc6IHRoaXMucGFzdERhdGEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Bob25lTnVtYmVyJyA6IHRoaXMucGhvbmVOdW1iZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FsYXJtJyA6IHRoaXMuYWxhcm0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VzZXJJbmZvJyA6IHRoaXMudXNlckluZm99KSwKICAgICAgICAgIGhlYWRlcnM6IHsnQ29udGVudC10eXBlJyA6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04JywgfQogICAgICAgIH0pCiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKSAvLyBzZXJ2ZXIgc2hvdWxkIHJldHVybiB0aGUgcGhvbmUgbnVtYmVyCiAgICAgICAgdGhpcy5uZXdCRyA9IGRhdGEubmV3QkcKICAgICAgICB0aGlzLnBhc3REYXRhID0gZGF0YS5wYXN0RGF0YQogICAgICAgIHRoaXMuZm9yZWNhc3REYXRhID0gZGF0YS5mb3JlY2FzdERhdGEKICAgICAgICB0aGlzLmFsYXJtID0gZGF0YS5hbGFybQogICAgICB9IGNhdGNoKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcikKICAgICAgfQogICAgfSwKCiAgICAvLyBHZXQgbGl2ZSBwYXN0RGF0YSBmcm9tIHVzZXIgc2Vzc2lvbgogICAgYXN5bmMgZ2V0R2x1Y29zZURhdGEoKSB7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChiYXNlX3VybCArICdhcGkvZ2x1Y29zZS1kYXRhJykKICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpCiAgICAgICAgdGhpcy5wYXN0RGF0YSA9IGRhdGEucGFzdERhdGEKICAgICAgICB0aGlzLmZvcmVjYXN0RGF0YSA9IGRhdGEuZm9yZWNhc3REYXRhCiAgICAgIH0gY2F0Y2goZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKQogICAgICB9CiAgICB9LAoKCiAgfSwKCiAgbW91bnRlZCgpIHsKICAgIC8vIFRPRE86IGluaXRpYWxpemUgdXNlciBzZXNzaW9uIG9uIHNlcnZlcgogICAgdGhpcy5nZXRHbHVjb3NlRGF0YSgpCiAgfSwKfQo="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <h1>SweetTweet</h1>\n    <p>Helping you prevent hypoglycemia</p>\n    <user-form @add:userInfo=\"setUserInfo\" :userInfo=\"userInfo\" />\n    <phone-form @add:newPhoneNumber=\"addPhoneNumber\" :phoneNumber=\"phoneNumber\"/>\n    <glucose-form @add:newBG=\"addNewBG\" />\n    <glucose-vis :pastData=\"pastData\" :forecastData=\"forecastData\"/>\n  </div>\n</template>\n\n<script>\nimport GlucoseVis from '@/components/GlucoseVis.vue'\nimport GlucoseForm from '@/components/GlucoseForm.vue'\nimport PhoneForm from '@/components/PhoneForm.vue'\nimport UserForm from '@/components/UserForm.vue'\n\n// Change base_url when deployed - Flask server base_url\nconst base_url = 'http://127.0.0.1:5000/'\n\nexport default {\n  name: 'app',\n  components: {\n    PhoneForm,\n    GlucoseVis,\n    GlucoseForm,\n    UserForm\n  },\n\n  data() {\n    return {\n      phoneNumber: \"\",\n      pastData: [],\n      forecastData: [],\n      newBG: \"\",\n      alarm: 0,\n      userInfo: {},\n    }\n  },\n\n  methods: {\n\n    // Update phoneNumber state\n    addPhoneNumber(newPhoneNumber) {\n      this.phoneNumber = newPhoneNumber\n    },\n\n    setUserInfo(userInfo) {\n      this.userInfo = userInfo\n    },\n\n    // POST new BG measurement - returns full live glucose data + model output - TODO\n    async addNewBG(newBG) {\n      try {\n        const response = await fetch(base_url + 'api/update-glucose', {\n          method: 'POST',\n          body: JSON.stringify({'newBG' : newBG,\n                                'pastData': this.pastData,\n                                'phoneNumber' : this.phoneNumber,\n                                'alarm' : this.alarm,\n                                'userInfo' : this.userInfo}),\n          headers: {'Content-type' : 'application/json; charset=UTF-8', }\n        })\n        const data = await response.json() // server should return the phone number\n        this.newBG = data.newBG\n        this.pastData = data.pastData\n        this.forecastData = data.forecastData\n        this.alarm = data.alarm\n      } catch(error) {\n        console.error(error)\n      }\n    },\n\n    // Get live pastData from user session\n    async getGlucoseData() {\n      try {\n        const response = await fetch(base_url + 'api/glucose-data')\n        const data = await response.json()\n        this.pastData = data.pastData\n        this.forecastData = data.forecastData\n      } catch(error) {\n        console.error(error)\n      }\n    },\n\n\n  },\n\n  mounted() {\n    // TODO: initialize user session on server\n    this.getGlucoseData()\n  },\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"]}]}